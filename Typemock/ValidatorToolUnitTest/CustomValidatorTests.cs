using NUnit.Framework;
using System.Linq;
using TypeMock.ArrangeActAssert;
using TypeMock.ArrangeActAssert.Suggest;
using ValidatorTool;
using System.Text.RegularExpressions;

//-------------------------------------------------------------------------------------------------------------------
// Unit Tests generated by Typemock.
// You are invited to modify the tests just take note to leave tests in region
//-------------------------------------------------------------------------------------------------------------------
namespace UnitTestValidatorTool
{
    [SafetyNet(typeof(CustomValidator)), Isolated(), TestFixture()]
    public class CustomValidatorTests
    {
        #region Unit Tests for IsCreditCard

        [Test]
        public void IsCreditCard_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();
           // Isolate.WhenCalled(() => Regex.IsMatch(null, null)).WillReturn(true);

            // act
            var result = customValidator.IsCreditCard("4234567890123");

            // assert
            Assert.AreEqual(true, result);
        }

        [Test]
        public void IsCreditCard_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
            Isolate.WhenCalled(() => Regex.IsMatch(null, null)).WillReturn(false);
             
            // act
            var result = customValidator.IsCreditCard("ccnumber");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsDate
        
        [Test]
        public void IsDate_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsDate("date");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsDateFormat
        
        [Test]
        public void IsDateFormat_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
            Isolate.WhenCalled(() => Regex.IsMatch(null, null)).WillReturn(false);
             
            // act
            var result = customValidator.IsDateFormat("date");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsDateTimeFormat
        
        [Test]
        public void IsDateTimeFormat_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsDateTimeFormat("datetime");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion
        #region Unit Tests for IsEmail
        
        [Test]
        public void IsEmail_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();
            Isolate.WhenCalled(() => Regex.IsMatch(null, null)).WillReturn(true);
             
            // act
            var result = customValidator.IsEmail("nico.bulusan@sminvestments.com");
             
            // assert
            Assert.AreEqual(true, result);
        }

        [Test]
        public void IsEmail_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
            Isolate.WhenCalled(() => Regex.IsMatch(null, null)).WillReturn(false);

            // act
            var result = customValidator.IsEmail("nico@.bulusan@@sminvestments.com");

            // assert
            Assert.AreEqual(false, result);
        }


        #endregion

        #region Unit Tests for IsInteger

        [Test]
        public void IsInteger_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();

            // act
            var result = customValidator.IsInteger("456");

            // assert
            Assert.AreEqual(true, result);
        }

        [Test]
        public void IsInteger_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsInteger("qwewqe");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsIpv4

        [Test]
        public void IsIpv4_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();

            // act
            var result = customValidator.IsIpv4("192.168.0.1");

            // assert
            Assert.AreEqual(true, result);
        }

        [Test]
        public void IsIpv4_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsIpv4("192.168.0.1.1");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsNumber
        
        [Test]
        public void IsNumber_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsNumber("number");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsOnlyLetterAccentSp
        
        [Test]
        public void IsOnlyLetterAccentSp_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsOnlyLetterAccentSp("number");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsOnlyLetterNumber
        [Test]
        public void IsOnlyLetterNumber_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();

            // act
            var result = customValidator.IsOnlyLetterNumber("123ca");

            // assert
            Assert.AreEqual(true, result);
        }

        [Test]
        public void IsOnlyLetterNumber_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsOnlyLetterNumber("*number");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsOnlyLetterSp
        [Test]
        public void IsOnlyLetterSp_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();

            // act
            var result = customValidator.IsOnlyLetterSp("asdsadsa");

            // assert
            Assert.AreEqual(true, result);
        }


        [Test]
        public void IsOnlyLetterSp_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsOnlyLetterSp("1234");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsOnlyNumberSp
        
        [Test]
        public void IsOnlyNumberSp_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsOnlyNumberSp("number");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsPhone
        
        [Test]
        public void IsPhone_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsPhone("phoneNumber");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsPositiveNumber
        
        [Test]
        public void IsPositiveNumber_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsPositiveNumber("number");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion

        #region Unit Tests for IsTimeFormat
        
        [Test]
        public void IsTimeFormat_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsTimeFormat("time");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion
        #region Unit Tests for IsUrl

        [Test]
        public void IsUrl_Test_ReturnsTrue()
        {
            // arrange
            var customValidator = new CustomValidator();

            // act
            var result = customValidator.IsUrl("https://mail.SMINVESTMENTS.com/owa");

            // assert
            Assert.AreEqual(true, result);
        }

        [Test]
        public void IsUrl_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsUrl("url");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion
        #region Unit Tests for IsZipCode
        
        [Test]
        public void IsZipCode_Test_ReturnsFalse()
        {
            // arrange
            var customValidator = new CustomValidator();
             
            // act
            var result = customValidator.IsZipCode("zipCode");
             
            // assert
            Assert.AreEqual(false, result);
        }

        #endregion




        #region Setup
        [SetUp]
        public void Setup_RunBeforeEachTest()
        {
            TestUtil.ResetAllStatics();
            TestUtil.AssertRunningInSandbox();
        }
        #endregion

    }
}
